# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpectraPluginDialog
                                 A QGIS plugin
 Smart Platform for Earth's Collected Imagery Analysis - AI-powered remote sensing analysis tool (object detection, classification, segmentation, change detection)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Deepresense
        email                : deepresense@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from PyQt5.QtWidgets import  QFrame, QLabel, QVBoxLayout, QSizePolicy
from qgis.core import QgsProject, QgsMapLayer
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QRect, QEvent
from .spectra_widget_script import AOIMenu, InputImageMenu, ModelMenuGroup, TabLogWidget, ExportMenuGroup, CustomGraphicsView

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'spectra_plugin_dialog_base.ui'))


class SpectraPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    
# ||||||||||||||||||||||||||||||||||||||||||||||| INITIALIZATION |||||||||||||||||||||||||||||||||||||||||||||||
    def __init__(self, parent=None):
        """Constructor."""
        super(SpectraPluginDialog, self).__init__(parent)
        # # Set up the user interface from Designer through FORM_CLASS.
        # # After self.setupUi() you can access any designer object by doing
        # # self.<objectname>, and you can use autoconnect slots - see
        # # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)



        # First Tab
        # ****************************************************************************************************
        # InputMenuGroup
        # ----------------------------------------------------------------------------------------------------
        self.input_box = InputImageMenu(self.comboBox)  # Pass the button to handler
        self.toolButton.clicked.connect(self.input_box.browse_raster_file)  # Connect signal
        self.input_box.populate_raster_combo()  # Call setup method (if public)


        # input AOI | input group============================================================================
        self.aoi_box = AOIMenu(self.comboBox_2)  # Pass the button to handler
        self.toolButton_2.clicked.connect(self.aoi_box.browse_aoi_shapefile)  # Connect signal
        self.aoi_box.populate_aoi_combo()  # Call setup method (if public)
        # input AOI | input group============================================================================

        # ----------------------------------------------------------------------------------------------------


        # ModelMenuGroup 
        # ---------------------------------------------------------------------------------------------------
        # Initialize the logic handler
        self.model_mgr = ModelMenuGroup(
        self.comboBox_3,
        self.comboBox_7, 
        self.comboBox_4, 
        self.toolButton_3,
        self.groupBox_4,
        self.toolButton_5,
        self.scrollArea,
        )
    
        # Optional: Connect to model changes
        self.model_mgr.model_changed.connect(self.on_model_changed)
        
        # Styling parameter description label
        self.label_10.setAlignment(Qt.AlignJustify)
        self.label_10.setStyleSheet("font-weight: bold; padding: 5px;")
        self.label_10.setFrameShape(QFrame.Box)

        # Pop up information for question mark button in parameter menu group (?)
        
        self.pushButton_5.clicked.connect(ModelMenuGroup.show_text1)
        self.pushButton_6.clicked.connect(ModelMenuGroup.show_text2)
        self.pushButton_7.clicked.connect(ModelMenuGroup.show_text3)

        # Pop up information for question mark button in parameter menu group (?)
        self.pushButton_13.clicked.connect(ModelMenuGroup.show_text5)
        # Pop up information for question mark button in parameter menu group (?)
        self.pushButton_11.clicked.connect(ModelMenuGroup.show_text4)

        # Initial value for image resolution field
        index = self.comboBox_9.findText("256")
        if index != -1:
            self.comboBox_9.setCurrentIndex(index)

        # self.widget_4.layout().setSizeConstraint(QVBoxLayout.SetMinimumSize)
        # self.groupBox_2.layout().setSizeConstraint(QVBoxLayout.SetMinimumSize)

        # Toggle parameter
        self.toolButton_5.toggled.connect(self.model_mgr.setup_menu_toggle)

        # ----------------------------------------------------------------------------------------------------



        # ExportMenuGroup 
        # ---------------------------------------------------------------------------------------------------
        # Visibility
        self.exportmenu = ExportMenuGroup(self.lineEdit, self.comboBox_5)
        # Functionality
        # Connect the export button (change to your actual widget names)
        self.toolButton_4.clicked.connect(self.exportmenu.select_export_path)
        # Pop up information for question mark button in parameter menu group (?)
        self.pushButton_14.clicked.connect(ModelMenuGroup.show_text6)
        # ---------------------------------------------------------------------------------------------------

        # ****************************************************************************************************



        # Second Tab
        # ****************************************************************************************************
        # Connecting button to slot
        # ===================================================================================================
        self.Tab2 = TabLogWidget(self.plainTextEdit, self.tabWidget)
        self.pushButton_4.clicked.connect(self.Tab2.change_tab)
        self.pushButton_9.clicked.connect(self.Tab2.clear_log)
        self.pushButton_10.clicked.connect(self.Tab2.copy_log)
        self.pushButton_8.clicked.connect(self.Tab2.export_log)
        # ===================================================================================================
        # ****************************************************************************************************
    



        # Graphics View (init)
        # ****************************************************************************************************
        # Setup navigation preview (must be called after UI is set up)
        self.graphics_view_nav = CustomGraphicsView(self.graphicsView)  
        # self.graphics_view_nav.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.graphics_view_nav.setGeometry(QRect(self.graphicsView.pos().x(),
                                   self.graphicsView.pos().y(),
                                   self.graphicsView.width(),
                                   self.graphicsView.height()))
        
        self.graphics_view_nav.show()

        self.graphicsView.installEventFilter(self)


        # Tool button for graphics view
        self.toolButton_8.clicked.connect(self.graphics_view_nav.set_pan_mode) # for pan tool button
        self.toolButton_6.clicked.connect(self.graphics_view_nav.set_zoom_in_mode) # for zoom in tool button
        self.toolButton_7.clicked.connect(self.graphics_view_nav.set_zoom_out_mode) # for zoom out tool button
        self.toolButton_9.clicked.connect(self.graphics_view_nav.zoom_full_extent) # for zoom full extent button
        
        # Styling tool bar widget
        self.widget_11.setStyleSheet("#widget_11 { border: 1px solid white; background-color: white; }")

# ||||||||||||||||||||||||||||||||||||||||||||||| INITIALIZATION |||||||||||||||||||||||||||||||||||||||||||||||




# |||||||||||||||||||||||||||||||||||||||||||||||||| METHOD ||||||||||||||||||||||||||||||||||||||||||||||||||||
    # Model menu group (method)
    # ****************************************************************************************************
    # Example slot
    def on_model_changed(self, model_path):
        print(f"Model changed to: {model_path}")
    # ****************************************************************************************************



    # Graphics View (method)
    # ****************************************************************************************************
    def eventFilter(self, obj, event):
        if obj is self.graphicsView and event.type() == QEvent.Resize:
            new_rect = self.graphicsView.geometry()  # Gets x,y,width,height
            self.update_rectangle(new_rect)
        return super().eventFilter(obj, event)

    def update_rectangle(self, rect):

        self.graphics_view_nav.resize(rect.width(), rect.height())
        print(f"Updated geometry: X={rect.x()}, Y={rect.y()}, {rect.width()}x{rect.height()}")

        # for reset graphics view
    def closeEvent(self, event):
        self.graphics_view_nav.resetTransform()
        self.graphics_view_nav.reset_view()
        super().closeEvent(event)

    # ****************************************************************************************************

# |||||||||||||||||||||||||||||||||||||||||||||||||| METHOD ||||||||||||||||||||||||||||||||||||||||||||||||||||
    

